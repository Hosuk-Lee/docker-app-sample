/*
 * Savings Account
 * This service domain orchestrates a consumer savings account. The typical range of services and fees covers payments from and scheduled and ad-hoc deposits to the account, standing orders, sweeps, and liens.
 *
 * OpenAPI spec version: 11.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.kb.sample.savings.model;
import com.fasterxml.jackson.annotation.JsonProperty;

import java.util.Objects;


import io.swagger.v3.oas.annotations.media.Schema;

/**
 * Input: UpBQ Update a payment transaction configuration or specific transaction
 */
@Schema(description = "Input: UpBQ Update a payment transaction configuration or specific transaction")
@jakarta.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-10-20T14:18:15.269223656Z[GMT]")

public class UpdatePaymentsRequest {
  @JsonProperty("Payments")
  private UpdatePaymentsRequestPayments payments = null;

  public UpdatePaymentsRequest payments(UpdatePaymentsRequestPayments payments) {
    this.payments = payments;
    return this;
  }

   /**
   * Get payments
   * @return payments
  **/
  @Schema(description = "")
  public UpdatePaymentsRequestPayments getPayments() {
    return payments;
  }

  public void setPayments(UpdatePaymentsRequestPayments payments) {
    this.payments = payments;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdatePaymentsRequest updatePaymentsRequest = (UpdatePaymentsRequest) o;
    return Objects.equals(this.payments, updatePaymentsRequest.payments);
  }

  @Override
  public int hashCode() {
    return Objects.hash(payments);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdatePaymentsRequest {\n");
    
    sb.append("    payments: ").append(toIndentedString(payments)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
