:toc:
Kafka

* Name
. Cluster Name
. Zookeeper Cluster Name
. Kafka Cluster Name

* Broker
. foo-broker-1 ~ foo-broker-n

* Zookeeper
. foo-zookeeper-1 ~ foo-zookeeper-n

* Topic
. kebab case 사용
. 제약사항
- 249자 이내 사용/ 다음 기호("-", "_", ".") 사용 가능하지만 "-" 권고
. 사용용도
- Data Stream (로그 데이터, 조회 분산), Online Message, Third Party
- Internal (System 전용) / External (범용 구분)
- 응답 토픽 필요 여부에 따라 topic 명 + reply 추가
. Consumer Group
- prefix + topic 명

:toc:
Zookeeper

* JVM 옵션
. java_개선 확인

* tickTime
. 2000 (2000~3000)
. 값이 작으면 initLimit, synLimit 등 leader, follower 간 동기화 시간이 짧아 일관성 처리를 위한 재처리 등으로 성능 저하가 될 수 있다.
. 값이 너무 크면 비정상 상황에 대한 인지가 늦어져 장애가 길어질 수 있다.

* maxClientCnxns
. maxClientCnxns = 60
. 단일 broker 에 대한 소켓 수준의 동시 연결 수에 대한 제한값으로 설정되지 않을 경우 DoS 공격 또는 File Descriptor 고갈 등 성능 저하 및 장애가 발생할 수 있음.

* initLimit
. 권고 10
. 클러스터 리더에 연결하고 동기화 할 수 있도록 허용하는 시간
. 처음 주키퍼의 follower 가 leader 와 연결 시도시 가지는 tick 제한 회수

* syncLimit
. 권고 5
. follower 가 leader 와 연결된 후, ensemble 안에서 leader 와 동기화되기 위한 tick 제한횟수

* 기타
. 로그 용량 log.dir 디스크사용량 * 7 (기본로그보관은 7일임)
. Zookeeper 로그 레벨 log4j.properties 에 INFO 레벨 설정

:toc:
Broker

* Recover Threads 설정
. num.recovery.threads.per.data.dir >= 2
. 장애, 신규 Broker 추가 등으로 시작할때 로딩 시간이 길어져 정상 동작이 늦어질 수 있음.

* Topic 자동 생성
. auto.create.topics.enable = false 설정
. 일반 사용자에 의한 운영시스템 Topic 추가가 가능하므로 운영 안정성 문제 발생

* Topic 삭제 설정
. 운영시스템 Topic 을 삭제할 수 있고 복구가 불가능 하므로 운영 안정성 문제 발생

* Zookeeper 세션 타임아웃
. zookeeper.session.timeout.ms >= 18000(ms)
. Zookeeper 와 Broker 의 세션 타임아웃 시간이 짧아 세션이 안정적으로 유지되지 않아 세션 재연결 등에 의한 성능저하가 발생할 수 있음

* Replica 동기화 최대 지연 허용시간
. replica.lag.time.max.ms >= 30000(ms) messages 의 양이 많을 경우 leaders replica 로부터의 동기화 시간이 늘어나서 OutOfSync 상태가 발생할 수 있음

* 소켓 수신버퍼 크기
. socket.receive.buffer.bytes >= 4194304
. Kafka 에 동시 접속 사용량이 많은 경우 모든 소켓의 수신 버퍼의 크기가 작아 성능 저하 및 처리 지연이 발생할 수 있음.

* 소켓 송신버퍼 크기
. socket.send.buffer.bytes >= 4194304
. Kafka 에 동시 접속 사용량이 많은 경우 모든 소켓의 송신 버퍼의 크기가 작아 성능 저하 및 처리 지연이 발생할 수 있음.

* 기타
. 로그용량
. 로그레벨

:toc:
토픽 설계

* 생성옵션
. replication-factor >=3, partitions >=3, ISR>2
. 메시지 순서 보장이 필수인 경우 partitions = 1
. 하나의 topic 에는 동일한 메시지 타입(텍스트, json, binary )만 저장해야 함
. topic 별 메시지 타입, 용도, 사이즈, 보존기간 정책 필요

* 고성능
. 동시 처리(Concurrency) 증가
- Consumer Group 과 같은 Consumer 인스턴스(springboot app)을 추가하거나 각 Consumer 인수턴스 내 concurrency 값을 늘려야함.
- 동시처리 개수만큼 토픽 파티션이 나누어져 있어야 함
. 파티션 분할
- Partition 개수 > Consumer 개수
- 부하 분산을 위해 Message Key 기반으로 분할
- 토픽 파티션 개수 계산 sample > 초당 메시지 발행 수 / Consumer 1개가 1초당 처리하는 개수 (1000(발행수/100(처리량) = 10개 파티션)

* 가용성
. 기본정책
- default.replication.factory 3이상 (브로커 수만큼)
- num.partitions 를 3이상 설정 (브로커 수만큼)

* DLT (Dead Letter Topic)
. topic + dlt (dlq) 로 Error Handler , DLT Consumer 구현


* 모니터링
. Grafana-Prometheus > Kafka Exporter & Jmx Exporter (strimzi Kafka Exporter)
. Kafka UI > Broker 요청
. 주요지표
- Broker
A. UnderReplicatedPartitions 미복제 파티션 개수
a. Leader Replica Broker 의 파티션을 Follower Replica Broker 들이 복제하지 못한 파티션의 총계
b. 0이 아닌 숫자가 변동없이 나타나면 장애
B. ActiveControllerCount
a. 해당 브로커가 클러스터의 컨트롤러인지 나타내는 정보
b. 1의 값을 나타내는 Broker 의 개수가 1이 아니면 장애
C. BytesInPerSec
a. 모든 토픽의 바이트 입력을 초당 바이트로 나타내는 성능 측정 지표
b. producer 로 부터 broker 가 받는 메시지 트래픽이 얼마나 되는지 측정하는데 도움
D. BytesOutPerSec
a. 모든 토픽의 바이트 입력을 초당 바이트로 나타내는 성능 측정 지표
b. consumer 가 메시지를 읽는 속도 참고
E. TotalTimeMs
a. 하나의 요청을 처리하는데 소요되는 총 시간을 측정
b. 정상적인 상황에서는 값의 변동이 최소화 되어야 함.
c. 구간별로 분할하여 시간 측정 가능
F. RequestPerSec
a. producer, consuer, follower 들의 요청빈도
- Host 레벨 Metric
A. Page cache reads ratio
a. Page Cache 에서 Read vs Disk 에서 Read 하는 비율
b. 값이 높을수록 읽기 속도가 빨라지고 성능이 향상됨
B. Disk Usage
a. Kafka 에 사용 가능한 여유 디스크 공간 모니터링
C. CPU Usage
a. CPU 사용량 모니터링
D. Network bytes send/received
a. 네트워크 트래픽 in/out 모니터링
b. host 수준 네트워크 처리량 모니터링
- JVM Metric
A. ColletionCount
a. jvm 에서 실행하는 gc 횟수
b. full gc 횟수 확인
B. CollectionTime
a. jvm 에서 실행되는 gc 수행 소요시간 (ms)
b. full gc 횟수 확인
- Producer
A. compression-rate-avg
a. 압축 전후 대비 배치 크기의 평균 비율, 레코드 배치의 평균 압축률
b. 압축률이 낮을수록 효율성이 낮음
B. response-rate
a. Producer 의 경우 Broker 로부터 초당 수신된 평균 응답수
b. 필요한 ack (0,1,all) 수만큼 수신될대까지 producer 데이터 사용 못함
C. request-rate
a. producer 가 broker 에게 초당 전송한 평균 요청의수
b. 지속적인 서비스가 가용성을 보장을 위해서 rate-limiting을 enable 하는 것이 좋음.
D. record-error-rate
a. Record 전송 중 오류가 발생한 초당 평균 횟수 (재시도를 하였음에도 불구하고 최종적으로 실패)
b. 0이 아닌 숫자가 변동없이 꾸준히 나타나는 경우 장애 판단 (메시지 유실)
E. request-latency-avg
a. 요청 평균 지연 시간(ms) > 호출 시점부터 Producer 가 borker로부터 응답을 받을 때까지의 시간을 측정한 값
b. batch.size 와 linger.ms 설정을 통해 메시지 일괄 처리를 통해 해당 값을 최적화
- Consumer
A. records-lag
a. consumer 의 현재 로그 Offset 과 producer 의 현재 로그 Offset 간 차이
b. producer 의 메시지 발행속도와 consumer 의 메시지 처리 속도에 불균형이 발생할 때 그 차이가 lag
c. consumer 가 실시간 데이터를 처리하는 경우 지속적으로 높은 Lag 값은 과부화된 consumer 의 상태이며 더 많은 consumer 를 프로비저닝 하고 topic의 파티션을 분할할 것.
d. 순간적으로 발생한 lag 도 나타날 수 있으나 이 상황에 반드시 문제 상황은 아님.
B. records-lag-max
a. 관찰된 Record 지연의 최대 값
C. bytes-consumed-rate
a. consumer 네트워크 처리량 모니터링
b. 소비되는 레코드 비율(records-consumed-rate)의 급격한 감소는 consumer 실패를 나타낼 수 있으나 네트워크 처리량이 일정하면 정상임.
D. fetch-rate
a. consumer 가 수행하는 초당 Fetch 수
b. conuser 의 fetch 속도는 전반적인 consumer 의 상태를 나타냄
c. 0 값에 접근 한다면 오류

* 가용성확보
- 이중화, mirrormaker
- 미러링데이터
. 토픽, 컨슈머그룹
. 토픽 설정 및 접근제어(ACL)
. offset, partitions